import { Injectable } from '@angular/core';
import { FilterPredicate } from './filter-predicate';
import isEqual from 'lodash-es/isEqual';
import difference from 'lodash-es/difference';
import flatten from 'lodash-es/flatten';
import * as i0 from "@angular/core";
export class ArrayPredicateService extends FilterPredicate {
    constructor() {
        super();
    }
    static warn() {
        console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);
        console.warn(ArrayPredicateService.SUGGESTION_WARNING);
    }
    equals(itemPair) {
        return isEqual(itemPair.example.sort(), itemPair.item.sort());
    }
    anywhere(itemPair) {
        return this.isSubset(itemPair.example, itemPair.item);
    }
    startsWith(itemPair) {
        ArrayPredicateService.warn();
        return this.anywhere(itemPair);
    }
    endsWith(itemPair) {
        ArrayPredicateService.warn();
        return this.anywhere(itemPair);
    }
    isSubset(example, item) {
        return !difference(flatten(example), flatten(item)).length;
    }
}
// tslint:disable-next-line:max-line-length
ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';
ArrayPredicateService.SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';
ArrayPredicateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ArrayPredicateService_Factory() { return new ArrayPredicateService(); }, token: ArrayPredicateService, providedIn: "root" });
ArrayPredicateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ArrayPredicateService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktcHJlZGljYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiRDovYW5ndWxhcl93b3Jrc3BhY2UvbmctbWF0ZXJpYWwtZXh0ZW5zaW9ucy9wcm9qZWN0cy9tYXQtdGFibGUtZmlsdGVyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hcnJheS1wcmVkaWNhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQztBQUN4QyxPQUFPLFVBQVUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QyxPQUFPLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQzs7QUFNeEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQTJCO0lBS3BFO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU8sTUFBTSxDQUFDLElBQUk7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQThCO1FBQzFDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDTSxRQUFRLENBQUMsUUFBOEI7UUFDNUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDTSxVQUFVLENBQUMsUUFBOEI7UUFDOUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDTSxRQUFRLENBQUMsUUFBOEI7UUFDNUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxRQUFRLENBQUMsT0FBbUIsRUFBRSxJQUFnQjtRQUNwRCxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDN0QsQ0FBQzs7QUE3QkQsMkNBQTJDO0FBQ25CLG1EQUE2QixHQUFHLDhGQUE4RixDQUFDO0FBQy9ILHdDQUFrQixHQUFHLGdGQUFnRixDQUFDOzs7WUFQL0gsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXJQcmVkaWNhdGUgfSBmcm9tICcuL2ZpbHRlci1wcmVkaWNhdGUnO1xyXG5pbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2gtZXMvaXNFcXVhbCc7XHJcbmltcG9ydCBkaWZmZXJlbmNlIGZyb20gJ2xvZGFzaC1lcy9kaWZmZXJlbmNlJztcclxuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnbG9kYXNoLWVzL2ZsYXR0ZW4nO1xyXG5pbXBvcnQgeyBJdGVtUGFpciB9IGZyb20gJy4uL2l0ZW0tcGFpcic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcnJheVByZWRpY2F0ZVNlcnZpY2UgZXh0ZW5kcyBGaWx0ZXJQcmVkaWNhdGU8QXJyYXk8YW55Pj4ge1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVU5TVVBQT1JURURfT1BFUkFUSU9OX1dBUk5JTkcgPSAnVGhpcyBmaWx0ZXJUeXBlIGlzIHVuc3VwcG9ydGVkIGZvciBhcnJheSBmaWx0ZXJpbmcuIEZpbHRlclR5cGUuQU5ZV0hFUkUgaXMgZXhlY3V0ZWQgaW5zdGVhZCEnO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNVR0dFU1RJT05fV0FSTklORyA9ICdZb3UgY2FuIHNldCBhIGN1c3RvbSBwcmVkaWNhdGUgZm9yIHRoZSBhcnJheSBwcm9wZXJ0eSB0aHJvdWdoIFByb3BlcnR5T3B0aW9ucyEnO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHdhcm4oKSB7XHJcbiAgICBjb25zb2xlLndhcm4oQXJyYXlQcmVkaWNhdGVTZXJ2aWNlLlVOU1VQUE9SVEVEX09QRVJBVElPTl9XQVJOSU5HKTtcclxuICAgIGNvbnNvbGUud2FybihBcnJheVByZWRpY2F0ZVNlcnZpY2UuU1VHR0VTVElPTl9XQVJOSU5HKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlcXVhbHMoaXRlbVBhaXI6IEl0ZW1QYWlyPEFycmF5PGFueT4+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNFcXVhbChpdGVtUGFpci5leGFtcGxlLnNvcnQoKSwgaXRlbVBhaXIuaXRlbS5zb3J0KCkpO1xyXG4gIH1cclxuICBwdWJsaWMgYW55d2hlcmUoaXRlbVBhaXI6IEl0ZW1QYWlyPEFycmF5PGFueT4+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1N1YnNldChpdGVtUGFpci5leGFtcGxlLCBpdGVtUGFpci5pdGVtKTtcclxuICB9XHJcbiAgcHVibGljIHN0YXJ0c1dpdGgoaXRlbVBhaXI6IEl0ZW1QYWlyPEFycmF5PGFueT4+KTogYm9vbGVhbiB7XHJcbiAgICBBcnJheVByZWRpY2F0ZVNlcnZpY2Uud2FybigpO1xyXG4gICAgcmV0dXJuIHRoaXMuYW55d2hlcmUoaXRlbVBhaXIpO1xyXG4gIH1cclxuICBwdWJsaWMgZW5kc1dpdGgoaXRlbVBhaXI6IEl0ZW1QYWlyPEFycmF5PGFueT4+KTogYm9vbGVhbiB7XHJcbiAgICBBcnJheVByZWRpY2F0ZVNlcnZpY2Uud2FybigpO1xyXG4gICAgcmV0dXJuIHRoaXMuYW55d2hlcmUoaXRlbVBhaXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpc1N1YnNldChleGFtcGxlOiBBcnJheTxhbnk+LCBpdGVtOiBBcnJheTxhbnk+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIWRpZmZlcmVuY2UoZmxhdHRlbihleGFtcGxlKSwgZmxhdHRlbihpdGVtKSkubGVuZ3RoO1xyXG4gIH1cclxuXHJcbn1cclxuIl19