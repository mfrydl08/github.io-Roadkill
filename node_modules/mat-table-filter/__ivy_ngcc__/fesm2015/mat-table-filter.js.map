{"version":3,"file":"mat-table-filter.js","sources":["../../../projects/mat-table-filter/src/lib/mat-table-filter.enum.ts","../../../projects/mat-table-filter/src/lib/services/filter-predicate.ts","../../../projects/mat-table-filter/src/lib/services/array-predicate.service.ts","../../../projects/mat-table-filter/src/lib/services/alpha-numeric-predicate.service.ts","../../../projects/mat-table-filter/src/lib/services/mat-table-filter.service.ts","../../../projects/mat-table-filter/src/lib/mat-table-filter.directive.ts","../../../projects/mat-table-filter/src/lib/mat-table-filter.module.ts","../../../projects/mat-table-filter/src/public-api.ts","../../../projects/mat-table-filter/src/mat-table-filter.ts"],"names":[],"mappings":"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","sourcesContent":["export enum MatTableFilter {\r\n  EQUALS = 'EQUALS',\r\n  ANYWHERE = 'ANYWHERE',\r\n  STARTS_WITH = 'STARTS_WITH',\r\n  ENDS_WITH = 'ENDS_WITH'\r\n}\r\n","import { MatTableFilter } from '../mat-table-filter.enum';\r\nimport { ItemPair } from '../item-pair';\r\nimport isString from 'lodash-es/isString';\r\nimport { Options } from '../options';\r\n\r\nexport abstract class FilterPredicate<T> {\r\n\r\n  public abstract equals(itemPair: ItemPair<T>): boolean;\r\n  public abstract anywhere(itemPair: ItemPair<T>): boolean;\r\n  public abstract startsWith(itemPair: ItemPair<T>): boolean;\r\n  public abstract endsWith(itemPair: ItemPair<T>): boolean;\r\n\r\n  public executeCondition(itemPair: ItemPair<T>, options: Options): boolean {\r\n    this.handleLetterCasing(itemPair, options.caseSensitive);\r\n    switch (options.filterType) {\r\n      case MatTableFilter.EQUALS:\r\n        return this.equals(itemPair);\r\n      case MatTableFilter.ANYWHERE:\r\n        return this.anywhere(itemPair);\r\n      case MatTableFilter.STARTS_WITH:\r\n        return this.startsWith(itemPair);\r\n      case MatTableFilter.ENDS_WITH:\r\n        return this.endsWith(itemPair);\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private handleLetterCasing(itemPair: ItemPair<any>, caseSensitive: boolean): void {\r\n    if (!caseSensitive) {\r\n      this.transformAllLowerCase(itemPair);\r\n    }\r\n  }\r\n\r\n  private transformAllLowerCase(object: any) {\r\n    // tslint:disable-next-line:forin\r\n    for (const key in object) {\r\n      const value = object[key];\r\n      if (isString(value)) {\r\n        object[key] = value.toLowerCase();\r\n      } else {\r\n        this.transformAllLowerCase(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FilterPredicate } from './filter-predicate';\r\nimport isEqual from 'lodash-es/isEqual';\r\nimport difference from 'lodash-es/difference';\r\nimport flatten from 'lodash-es/flatten';\r\nimport { ItemPair } from '../item-pair';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArrayPredicateService extends FilterPredicate<Array<any>> {\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  private static readonly UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';\r\n  private static readonly SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  private static warn() {\r\n    console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);\r\n    console.warn(ArrayPredicateService.SUGGESTION_WARNING);\r\n  }\r\n\r\n  public equals(itemPair: ItemPair<Array<any>>): boolean {\r\n    return isEqual(itemPair.example.sort(), itemPair.item.sort());\r\n  }\r\n  public anywhere(itemPair: ItemPair<Array<any>>): boolean {\r\n    return this.isSubset(itemPair.example, itemPair.item);\r\n  }\r\n  public startsWith(itemPair: ItemPair<Array<any>>): boolean {\r\n    ArrayPredicateService.warn();\r\n    return this.anywhere(itemPair);\r\n  }\r\n  public endsWith(itemPair: ItemPair<Array<any>>): boolean {\r\n    ArrayPredicateService.warn();\r\n    return this.anywhere(itemPair);\r\n  }\r\n\r\n  private isSubset(example: Array<any>, item: Array<any>): boolean {\r\n    return !difference(flatten(example), flatten(item)).length;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FilterPredicate } from './filter-predicate';\r\nimport { ItemPair } from '../item-pair';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlphaNumericPredicateService extends FilterPredicate<string> {\r\n\r\n  constructor() {\r\n    super();\r\n   }\r\n\r\n  public equals(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.example === itemPair.item;\r\n  }\r\n  public anywhere(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.includes(itemPair.example);\r\n  }\r\n  public startsWith(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.startsWith(itemPair.example);\r\n  }\r\n  public endsWith(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.endsWith(itemPair.example);\r\n  }\r\n\r\n}\r\n","import { PropertyOptions, PredicateFunc } from '../property-options';\r\nimport { ItemPair } from './../item-pair';\r\nimport { ArrayPredicateService } from './array-predicate.service';\r\nimport { AlphaNumericPredicateService } from './alpha-numeric-predicate.service';\r\nimport { Injectable } from '@angular/core';\r\nimport isEqual from 'lodash-es/isEqual';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport isNil from 'lodash-es/isNil';\r\nimport every from 'lodash-es/every';\r\nimport isFunction from 'lodash-es/isFunction';\r\nimport isArray from 'lodash-es/isArray';\r\nimport isBoolean from 'lodash-es/isBoolean';\r\nimport isString from 'lodash-es/isString';\r\nimport isNumber from 'lodash-es/isNumber';\r\nimport isEmpty from 'lodash-es/isEmpty';\r\nimport { Options } from '../options';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MatTableFilterService {\r\n  constructor(private _alphaNumericService: AlphaNumericPredicateService, private _arrayService: ArrayPredicateService) {}\r\n\r\n  public filterPredicate(itemPair: ItemPair<any>, propertyOptions: PropertyOptions,\r\n                         commonOptions: Options | PredicateFunc, propertyName?: string): boolean {\r\n    // tslint:disable-next-line:forin\r\n    const exampleKeys = Object.keys(itemPair.example);\r\n    for (const key of exampleKeys) {\r\n      const exampleValue = cloneDeep(itemPair.example[key]);\r\n      if (isNil(exampleValue) || every(exampleValue, isEmpty) && typeof exampleValue !== 'boolean') {\r\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\r\n        continue;\r\n      }\r\n      if (itemPair.item?.hasOwnProperty(key)) {\r\n        // if example entity has additional columns then search fails\r\n        const itemValue = cloneDeep(itemPair.item[key]);\r\n        const nextPropertyName = this.getNextPropertyName(propertyName, key);\r\n        const options = this.finalizeOptionsForProperty(commonOptions, propertyOptions, nextPropertyName);\r\n        if (isFunction(options)) { // if user defined predicate is present for property\r\n          const customPredicate = options as PredicateFunc;\r\n          if (!customPredicate(itemValue)) {\r\n            return false;\r\n          }\r\n        } else {\r\n          const columnOptions = options as Options;\r\n          if (this.isAlphaNumeric(itemValue)) {\r\n            const valuePair: ItemPair<string> = {item: itemValue.toString(), example: exampleValue};\r\n            if (!this._alphaNumericService.executeCondition(valuePair, columnOptions)) {\r\n              return false;\r\n            }\r\n          } else if (isArray(itemValue)) {\r\n            const valuePair: ItemPair<any[]> = {item: itemValue, example: exampleValue};\r\n            if (!this._arrayService.executeCondition(valuePair, columnOptions)) {\r\n              return false;\r\n            }\r\n          } else if (isBoolean(itemValue)) {\r\n            if (itemValue !== exampleValue) {\r\n              return false;\r\n            }\r\n          } else {\r\n            const valuePair: ItemPair<any> = {item: itemValue, example: exampleValue};\r\n            if (!this.filterPredicate(valuePair, propertyOptions, options, nextPropertyName)) {\r\n              // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\r\n              // however if it returns false then the item must not be in the list\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private finalizeOptionsForProperty(commonOptions: Options | PredicateFunc, propertyOptions: PropertyOptions, propertyName: string):\r\n   Options | PredicateFunc {\r\n    if (propertyOptions && propertyOptions.hasOwnProperty(propertyName)) {\r\n      return propertyOptions[propertyName];\r\n    } else {\r\n      return commonOptions;\r\n    }\r\n  }\r\n\r\n  private getNextPropertyName(propertyName: string, key: string): string {\r\n    return propertyName ? (propertyName + '.' + key) : key;\r\n  }\r\n\r\n  public isChanged(oldEntity: any, newEntity: any): boolean {\r\n    return !isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\r\n  }\r\n\r\n  public toPlainJson(object: any): JSON {\r\n    if (object) {\r\n      return JSON.parse(JSON.stringify(object));\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private isAlphaNumeric(value: any): boolean {\r\n    return isString(value) || isNumber(value);\r\n  }\r\n}\r\n","import { PropertyOptions } from './property-options';\r\nimport { Directive, DoCheck, Input, Host, Self, Optional } from '@angular/core';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatTableFilter } from './mat-table-filter.enum';\r\nimport { MatTableFilterService } from './services/mat-table-filter.service';\r\n\r\n@Directive({\r\n  selector: '[matTableFilter]',\r\n  exportAs: 'matTableFilter'\r\n})\r\nexport class MatTableFilterDirective implements DoCheck {\r\n  private _oldExampleEntity: any;\r\n\r\n  @Input() exampleEntity: any;\r\n\r\n  /**\r\n   * in millis\r\n   */\r\n  @Input() debounceTime = 400;\r\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\r\n  @Input() caseSensitive = false;\r\n  @Input() customPredicate: (data: any) => boolean;\r\n  @Input() propertyOptions: PropertyOptions;\r\n  private _exampleEntitySubject: BehaviorSubject<void>;\r\n\r\n\r\n  constructor(\r\n    private _filterService: MatTableFilterService,\r\n    @Host() @Self() @Optional() private _table: MatTable<any>\r\n  ) {\r\n    this.initDebounceSubject();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\r\n      this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\r\n      this._exampleEntitySubject.next(undefined);\r\n    }\r\n  }\r\n\r\n\r\n  private initDebounceSubject() {\r\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\r\n    this._exampleEntitySubject.pipe(\r\n      debounceTime(this.debounceTime))\r\n      .subscribe(_ => {\r\n        this.updateFilterPredicate();\r\n      });\r\n  }\r\n\r\n  private updateFilterPredicate() {\r\n    const matDataSource = this.getMatDataSource();\r\n    if (matDataSource) {\r\n      matDataSource.filterPredicate = this.getFilterPredicate();\r\n      matDataSource.filter = this.exampleEntity as any;\r\n    }\r\n  }\r\n\r\n  private getFilterPredicate() {\r\n    if (this.customPredicate) {\r\n      return this.customPredicate;\r\n    } else {\r\n      return (item: any): boolean => {\r\n        return this._filterService.filterPredicate({ example: this.exampleEntity, item }, this.propertyOptions,\r\n          { filterType: this.filterType, caseSensitive: this.caseSensitive });\r\n      };\r\n    }\r\n  }\r\n\r\n  private getMatDataSource(): MatTableDataSource<any> {\r\n    const matTable = this._table as MatTable<any>;\r\n    return (matTable.dataSource as MatTableDataSource<any>);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\r\n\r\n@NgModule({\r\n  declarations: [MatTableFilterDirective],\r\n  imports: [\r\n    MatTableModule\r\n  ],\r\n  exports: [MatTableFilterDirective]\r\n})\r\nexport class MatTableFilterModule { }\r\n","\r\n\r\n/*\r\n * Public API Surface of mat-table-filter\r\n */\r\nexport * from './lib/mat-table-filter.module';\r\nexport { MatTableFilterService } from './lib/services/mat-table-filter.service';\r\nexport { MatTableFilter } from './lib/mat-table-filter.enum';\r\nexport { Options } from './lib/options';\r\nexport * from './lib/property-options';\r\nexport { MatTableFilterDirective } from './lib/mat-table-filter.directive';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AlphaNumericPredicateService as Éµa} from './lib/services/alpha-numeric-predicate.service';\nexport {ArrayPredicateService as Éµc} from './lib/services/array-predicate.service';\nexport {FilterPredicate as Éµb} from './lib/services/filter-predicate';"]}